/*
 * Copyright (c) 2015. Ronald D. Kurr kurr@jvmguy.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
//  compile('org.springframework.boot:spring-boot-starter-websocket')
//  compile('org.springframework.boot:spring-boot-starter-ws')
//  compile('org.springframework.boot:spring-boot-starter-jersey')
//  compile('io.ratpack:ratpack-spring-boot:1.1.1')
//  compile('com.vaadin:vaadin-spring-boot-starter:1.0.0')
//  compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
//  compile('org.springframework.data:spring-data-rest-hal-browser')
//  compile('org.springframework.boot:spring-boot-starter-mobile')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

/*
dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
    }
}
*/

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn 'documentationTests'
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/api'
    }
}

//TODO: only works if the Groovy plugin has previously been included.  Should probably check.
task documentationTests( type: Test ) {
    group 'Documentation'
    description = 'Runs the tests that generate the examples for the API documentation.'
    debug = false
    useJUnit {
        includeCategories 'org.kurron.categories.DocumentationTest'
    }
    testLogging {
        showStandardStreams = false
        exceptionFormat = 'full'
    }
    reports.html.destination =  "$buildDir/reports/documentationTests"
    // if the profile system property is set, copy into forked child process
    def springProfilesActive = System.properties['spring.profiles.active']
    if ( springProfilesActive ) { systemProperties['spring.profiles.active'] = springProfilesActive }
}
